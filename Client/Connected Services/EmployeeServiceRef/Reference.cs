//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Client.EmployeeServiceRef {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="employee", Namespace="http://schemas.datacontract.org/2004/07/EmployeeService")]
    [System.SerializableAttribute()]
    public partial class employee : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string empAddField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string empEmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string empIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string empNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string empPhNoField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string empAdd {
            get {
                return this.empAddField;
            }
            set {
                if ((object.ReferenceEquals(this.empAddField, value) != true)) {
                    this.empAddField = value;
                    this.RaisePropertyChanged("empAdd");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string empEmail {
            get {
                return this.empEmailField;
            }
            set {
                if ((object.ReferenceEquals(this.empEmailField, value) != true)) {
                    this.empEmailField = value;
                    this.RaisePropertyChanged("empEmail");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string empID {
            get {
                return this.empIDField;
            }
            set {
                if ((object.ReferenceEquals(this.empIDField, value) != true)) {
                    this.empIDField = value;
                    this.RaisePropertyChanged("empID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string empName {
            get {
                return this.empNameField;
            }
            set {
                if ((object.ReferenceEquals(this.empNameField, value) != true)) {
                    this.empNameField = value;
                    this.RaisePropertyChanged("empName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string empPhNo {
            get {
                return this.empPhNoField;
            }
            set {
                if ((object.ReferenceEquals(this.empPhNoField, value) != true)) {
                    this.empPhNoField = value;
                    this.RaisePropertyChanged("empPhNo");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="EmployeeServiceRef.IEmployee")]
    public interface IEmployee {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmployee/AddData", ReplyAction="http://tempuri.org/IEmployee/AddDataResponse")]
        bool AddData(Client.EmployeeServiceRef.employee emp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmployee/AddData", ReplyAction="http://tempuri.org/IEmployee/AddDataResponse")]
        System.Threading.Tasks.Task<bool> AddDataAsync(Client.EmployeeServiceRef.employee emp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmployee/UpdateData", ReplyAction="http://tempuri.org/IEmployee/UpdateDataResponse")]
        bool UpdateData(int id, Client.EmployeeServiceRef.employee emp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmployee/UpdateData", ReplyAction="http://tempuri.org/IEmployee/UpdateDataResponse")]
        System.Threading.Tasks.Task<bool> UpdateDataAsync(int id, Client.EmployeeServiceRef.employee emp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmployee/DeleteData", ReplyAction="http://tempuri.org/IEmployee/DeleteDataResponse")]
        bool DeleteData(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmployee/DeleteData", ReplyAction="http://tempuri.org/IEmployee/DeleteDataResponse")]
        System.Threading.Tasks.Task<bool> DeleteDataAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmployee/FindData", ReplyAction="http://tempuri.org/IEmployee/FindDataResponse")]
        Client.EmployeeServiceRef.employee[] FindData(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmployee/FindData", ReplyAction="http://tempuri.org/IEmployee/FindDataResponse")]
        System.Threading.Tasks.Task<Client.EmployeeServiceRef.employee[]> FindDataAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmployee/FindAll", ReplyAction="http://tempuri.org/IEmployee/FindAllResponse")]
        Client.EmployeeServiceRef.employee[] FindAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmployee/FindAll", ReplyAction="http://tempuri.org/IEmployee/FindAllResponse")]
        System.Threading.Tasks.Task<Client.EmployeeServiceRef.employee[]> FindAllAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IEmployeeChannel : Client.EmployeeServiceRef.IEmployee, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class EmployeeClient : System.ServiceModel.ClientBase<Client.EmployeeServiceRef.IEmployee>, Client.EmployeeServiceRef.IEmployee {
        
        public EmployeeClient() {
        }
        
        public EmployeeClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public EmployeeClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EmployeeClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EmployeeClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool AddData(Client.EmployeeServiceRef.employee emp) {
            return base.Channel.AddData(emp);
        }
        
        public System.Threading.Tasks.Task<bool> AddDataAsync(Client.EmployeeServiceRef.employee emp) {
            return base.Channel.AddDataAsync(emp);
        }
        
        public bool UpdateData(int id, Client.EmployeeServiceRef.employee emp) {
            return base.Channel.UpdateData(id, emp);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateDataAsync(int id, Client.EmployeeServiceRef.employee emp) {
            return base.Channel.UpdateDataAsync(id, emp);
        }
        
        public bool DeleteData(int id) {
            return base.Channel.DeleteData(id);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteDataAsync(int id) {
            return base.Channel.DeleteDataAsync(id);
        }
        
        public Client.EmployeeServiceRef.employee[] FindData(int id) {
            return base.Channel.FindData(id);
        }
        
        public System.Threading.Tasks.Task<Client.EmployeeServiceRef.employee[]> FindDataAsync(int id) {
            return base.Channel.FindDataAsync(id);
        }
        
        public Client.EmployeeServiceRef.employee[] FindAll() {
            return base.Channel.FindAll();
        }
        
        public System.Threading.Tasks.Task<Client.EmployeeServiceRef.employee[]> FindAllAsync() {
            return base.Channel.FindAllAsync();
        }
    }
}
